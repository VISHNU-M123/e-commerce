<%- include('../layouts/header.ejs') %>
<%- include('../layouts/navbar.ejs') %>
<%- include('../layouts/mobileNav.ejs') %>

<script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"></script>



    <div class="page-wrapper">
        <header class="header">
            <div class="header-top">
                <div class="container">
                    <div class="header-left">
                        <div class="header-dropdown">
                           
                            <div class="header-menu">
                                
                            </div><!-- End .header-menu -->
                        </div><!-- End .header-dropdown -->

                        <div class="header-dropdown">
                           
                            <div class="header-menu">
                                
                            </div><!-- End .header-menu -->
                        </div><!-- End .header-dropdown -->
                    </div><!-- End .header-left -->

                    <div class="header-right">
                       
                    </div><!-- End .header-right -->
                </div><!-- End .container -->
            </div><!-- End .header-top -->

            <div class="header-middle sticky-header">
                <div class="container">
                    <div class="header-left">
                        <a href="index.html" class="logo">  
                        </a>
                    </div><!-- End .header-left -->

                    <div class="header-right">
                        <div class="header-search">
                            
                        </div><!-- End .header-search -->
                        <div class="dropdown compare-dropdown"> 
                        </div><!-- End .compare-dropdown -->

                        <div class="dropdown cart-dropdown">
                           
                        </div><!-- End .cart-dropdown -->
                    </div><!-- End .header-right -->
                </div><!-- End .container -->
            </div><!-- End .header-middle -->
        </header><!-- End .header -->
        <main class="main">
        	<div class="page-header text-center" style="background-image: url('/user/assets/images/page-header-bg.jpg')">
        		<div class="container">
        			<h1 class="page-title">My Account<span>Shop</span></h1>
        		</div><!-- End .container -->
        	</div><!-- End .page-header -->
            <nav aria-label="breadcrumb" class="breadcrumb-nav mb-3">
                <div class="container">
                   
                </div><!-- End .container -->
            </nav><!-- End .breadcrumb-nav -->

            <div class="page-content">
            	<div class="dashboard">
	                <div class="container">
	                	<div class="row">
	                		<aside class="col-md-4 col-lg-3">
	                			<ul class="nav nav-dashboard flex-column mb-3 mb-md-0" role="tablist">
								    <li class="nav-item">
								        <a class="nav-link active" id="tab-dashboard-link" data-toggle="tab" href="#tab-dashboard" role="tab" aria-controls="tab-dashboard" aria-selected="true">Dashboard</a>
								    </li>
								    <li class="nav-item">
								        <a class="nav-link" id="tab-orders-link" data-toggle="tab" href="#tab-orders" role="tab" aria-controls="tab-orders" aria-selected="false">Orders</a>
								    </li>
								    <li class="nav-item">
								        <a class="nav-link" id="tab-address-link" data-toggle="tab" href="#tab-address" role="tab" aria-controls="tab-address" aria-selected="false">Adresses</a>
								    </li>
								    <li class="nav-item">
								        <a class="nav-link" id="tab-account-link" data-toggle="tab" href="#tab-account" role="tab" aria-controls="tab-account" aria-selected="false">Account Details</a>
								    </li>
                                    <li class="nav-item">
								        <a class="nav-link" id="tab-account-link" data-toggle="tab" href="#tab-wallet" role="tab" aria-controls="tab-wallet" aria-selected="false">Wallet</a>
								    </li>
								    <li class="nav-item">
								        <a class="nav-link" href="logout">Sign Out</a>
								    </li>
								</ul>
	                		</aside><!-- End .col-lg-3 -->

	                		<div class="col-md-8 col-lg-9">
	                			<div class="tab-content">
								    <div class="tab-pane fade show active" id="tab-dashboard" role="tabpanel" aria-labelledby="tab-dashboard-link">
								    	<p>Hello , <br><span class="font-weight-normal text-dark"><%= userName %></span> (not <span class="font-weight-normal text-dark">User</span>? <a href="#">Log out</a>) 
								    	<br>
								    	From your account dashboard you can view your <a href="#tab-orders" class="tab-trigger-link link-underline">recent orders</a>, manage your <a href="#tab-address" class="tab-trigger-link">shipping and billing addresses</a>, and <a href="#tab-account" class="tab-trigger-link">edit your password and account details</a>.</p>
								    </div><!-- .End .tab-pane -->

								    <!-- <div class="tab-pane fade" id="tab-orders" role="tabpanel" aria-labelledby="tab-orders-link">
								    	<p>No order has been made yet.</p>
								    	<a href="/allproducts" class="btn btn-outline-primary-2"><span>GO SHOP</span><i class="icon-long-arrow-right"></i></a>
								    </div> -->
                                    <!-- .End .tab-pane -->
                                    <div class="tab-pane fade" id="tab-orders" role="tabpanel" aria-labelledby="tab-orders-link">
                                        <% if (orders && orders.length > 0) { %>
                                            <table class="table mx-auto"> <!-- mx-auto for center alignment -->
                                                <thead>
                                                    <tr>
                                                        <th colspan="5">
                                                            <h5 class="text-center">Your Orders</h5> <!-- text-center for center alignment -->
                                                        </th>
                                                    </tr>
                                                    <tr>
                                                        <!-- <th>Order ID</th> -->
                                                        <th>Products</th>
                                                        <th>Total Price</th>
                                                        <th>Status</th>
                                                        <th>Action</th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    <% orders.forEach(order => { %>
                                                        <tr>
                                                            <!-- <td><%= order._id %></td> -->
                                                            <td>
                                                                <ul>
                                                                    <% order.products.forEach(product => { %>
                                                                        <li>
                                                                            Product: <%= product.productId.Name %>,<br>
                                                                            Quantity: <%= product.quantity %>,<br>
                                                                            Price: $<%= product.price %>
                                                                        </li>
                                                                    <% }); %>
                                                                </ul>
                                                            </td>
                                                            <td>â‚¹<%= order.totalPrice %></td>
                                                            <td><%= order.status %></td>

                                                            <% if (order.status === 'delivered') { %>
                                                                <!-- Add your code for 'Return Order' button -->
                                                                <td>
                                                                    <!-- Add your code for 'Return Order' button -->
                                                                    <button class="btn btn-danger return-order" data-order-id="<%= order._id %>">Return Order</button>
                                                                </td>
                                                            <% } else if (order.status === 'cancelled') { %>
                                                                <td>
                                                                    <button class="btn btn-primary" disabled>Cancelled</button>
                                                                </td>
                                                            <% } else { %>
                                                                <td>
                                                                    <button class="btn btn-primary cancel-order" data-order-id="<%= order._id %>">Cancel Order</button>
                                                                </td>
                                                            <% } %>
                                                        </tr>
                                                    <% }); %>
                                                </tbody>
                                            </table>
                                        <% } else { %>
                                            <p class="text-center">No order has been made yet.</p> <!-- text-center for center alignment -->
                                            <a href="/allproducts" class="btn btn-outline-primary-2 mx-auto"><span>GO SHOP</span><i class="icon-long-arrow-right"></i></a>
                                        <% } %>
                                    </div><!-- .End .tab-pane -->

								    <div class="tab-pane fade" id="tab-downloads" role="tabpanel" aria-labelledby="tab-downloads-link">
								    	<p>No downloads available yet.</p>
								    	<a href="category.html" class="btn btn-outline-primary-2"><span>GO SHOP</span><i class="icon-long-arrow-right"></i></a>
								    </div><!-- .End .tab-pane -->

								    <div class="tab-pane fade" id="tab-address" role="tabpanel" aria-labelledby="tab-address-link">
								    	<p>The following addresses will be used on the checkout page by default.</p>

								    	<div class="row">
								    		<div class="col-lg-12">
                                                <% if (locals.userAddresses) { %>
                                                 <% userAddresses.address.forEach(address=>{  %>
                                                    <div class="card card-dashboard" data-id="<%= address._id %>">
                                                        <div class="card-body">
                                                            <h3 class="card-title">Shipping Address</h3>
                                                            <!-- Display existing address details -->
                                                            <p>
                                                                Name: <%= address.name %><br>
                                                                Phone: <%= address.phone %><br>
                                                                Email: <%= address.email %><br>
                                                                Street Address: <%= address.streetAddress %>&nbsp;
                                                                City: <%= address.city %>&nbsp;
                                                                Pincode: <%= address.pincode %>&nbsp;
                                                                State: <%= address.state %><br>
                                                                <!-- <a href="/address/edit<%= address._id %>">Edit <i class="icon-edit"></i></a><br> -->
                                                                <a href="#" class="edit-address" data-toggle="collapse" data-target="#editAddressCollapse<%= address._id %>">Edit <i class="icon-edit"></i></a><br>

                                                                <a href="#" onclick="confirmDelete('<%= address._id %>')">Delete <ion-icon name="trash-outline"></ion-icon></a>

                                                            </p>
                                                        </div><!-- End .card-body -->
                                                    </div><!-- End .card-dashboard -->
                                                  
                                                    <div class="collapse" id="editAddressCollapse<%= address._id %>">
                                                        <!-- Include the form fields similar to the add address form -->
                                                        <!-- Use the existing address data to pre-fill the fields -->
                                                        <form id="editAddressForm" action="/address/edit/<%= address._id %>" method="post" class="edit-address-form">



                                                            <input type="hidden" name="addressId" value="<%= address._id %>">
                                                            <!-- ... Form fields ... -->
                                                            <div class="form-row">
                                                                <div class="form-group col-md-6     col-lg-5">
                                                                    <label for="inputName">Name</label>
                                                                    <input type="text" class="form-control" id="inputName" name="name" value="<%= address.name %>" placeholder="Enter your name" required>
                                                                </div>
                                                                <div class="form-group col-md-6  col-lg-5 ">
                                                                    <label for="inputPhone">Phone</label>
                                                                    <input type="text" class="form-control" id="inputPhone" name="phone" value="<%= address.phone %>" placeholder="Enter your phone" required>
                                                                </div>
                                                            </div>
                                                            <div class="form-row">
                                                                <div class="form-group col-md-6     col-lg-5">
                                                                    <label for="inputPincode">Pincode</label>
                                                                    <input type="text" class="form-control" id="inputPincode" name="pincode" value="<%= address.pincode %>" placeholder="Enter your pincode" required>
                                                                </div>
                                                                <div class="form-group col-md-6     col-lg-5">
                                                                    <label for="inputEmail">Email</label>
                                                                    <input type="email" class="form-control" id="inputEmail" name="email" value="<%= address.email %>" placeholder="Enter your email" required>
                                                                </div>
                                                            </div>
                                                            <div class="form-group  col-lg-10">
                                                                <label for="inputAddress">Address (Area and Street)</label>
                                                                <textarea class="form-control" id="inputAddress" rows="2"  name="streetAddress"  placeholder="Enter your address" required><%= address.streetAddress %></textarea>
                                                            </div>
                                                            <div class="form-row">
                                                                <div class="form-group col-md-6     col-lg-5">
                                                                    <label for="inputLocalityDistrict">City/District/Town</label>
                                                                    <input type="text" class="form-control" id="inputLocalityDistrict" name="city" value="<%= address.city %>"  placeholder="Enter your city/district/town" required>
                                                                </div>
                                                                <div class="form-group col-md-6   col-lg-5">
                                                                    <label for="inputState">State</label>
                                                                    <select id="inputState" name="state" value="<%= address.state %>" class="form-control" required>
                                                                        <option selected><%= address.state %></option>
                                                                        <!-- Add options for all 28 states of India -->
                                                                        <option>Andhra Pradesh</option>
                                                                        <option>Arunachal Pradesh</option>
                                                                        <option>Assam</option>
                                                                        <option>Bihar</option>
                                                                        <option>Chhattisgarh</option>
                                                                        <option>Goa</option>
                                                                        <option>Gujarat</option>
                                                                        <option>Haryana</option>
                                                                        <option>Himachal Pradesh</option>
                                                                        <option>Jharkhand </option>
                                                                        <option>Karnataka</option>
                                                                        <option>Kerala</option>
                                                                        <option>Madhya Pradesh</option>
                                                                        <option>Maharashtra</option>
                                                                        <option>Manipur</option>
                                                                        <option>Meghalaya</option>
                                                                        <option>Mizoram</option>
                                                                        <option>Nagaland</option>
                                                                        <option>Odisha</option>
                                                                        <option>Punjab</option>
                                                                        <option>Rajasthan</option>
                                                                        <option>Sikkim</option>
                                                                        <option>Tamil Nadu</option>
                                                                        <option>Telangana</option>
                                                                        <option>Tripura</option>
                                                                        <option>Uttar Pradesh</option>
                                                                        <option>Uttarakhand</option>
                                                                        <option>West Bengal</option>
                                            
                                            
                                                                        <!-- Add more options here -->
                                                                    </select>
                                                                </div>
                                                            </div>
                                                            <div class="form-row">
                                                                <div class="form-group col-md-6   col-lg-5">
                                                                    <label for="inputLandmark">Landmark (Optional)</label>
                                                                    <input type="text" class="form-control" id="inputLandmark" name="landmark" value="<%= address.landmark %>" placeholder="Enter your landmark">
                                                                </div>
                                                                <div class="form-group col-md-6   col-lg-5">
                                                                    <label for="inputAlternatePhone">Alternate Phone (Optional)</label>
                                                                    <input type="text" class="form-control" id="inputAlternatePhone" name="phone2" value="<%= address.phone2 %>" placeholder="Enter your alternate phone">
                                                                </div>
                                                            </div>
                                                            
                                                            <button type="submit" class="btn btn-primary">Save Changes</button>
                                                        </form>
                                                       
                                                        <br><br>
                                                    </div>


                                                 <% }) %>
                                                <% } else { %>
                                                    <p>No addresses found</p>
                                                <% } %>
								    		</div><!-- End .col-lg-6 -->

                                            <div class="container">
                                                <!-- Button to toggle the add new address form -->
                                                 <button class="btn btn-primary" type="button" data-toggle="collapse" data-target="#shippingAddressCollapse" aria-expanded="false" aria-controls="shippingAddressCollapse">
                                                     Add a New Address
                                                 </button>
                                                <div class="collapse" id="shippingAddressCollapse">
                                                    <div class="card card-body">
                                                        <form action="/address" method="post">
                                                            <div class="form-row">
                                                                <div class="form-group col-md-6     col-lg-5">
                                                                    <label for="inputName">Name</label>
                                                                    <input type="text" class="form-control" id="inputName" name="name" placeholder="Enter your name" required>
                                                                </div>
                                                                <div class="form-group col-md-6  col-lg-5 ">
                                                                    <label for="inputPhone">Phone</label>
                                                                    <input type="text" class="form-control" id="inputPhone" name="phone" placeholder="Enter your phone" required>
                                                                </div>
                                                            </div>
                                                            <div class="form-row">
                                                                <div class="form-group col-md-6     col-lg-5">
                                                                    <label for="inputPincode">Pincode</label>
                                                                    <input type="text" class="form-control" id="inputPincode" name="pincode" placeholder="Enter your pincode" required>
                                                                </div>
                                                                <div class="form-group col-md-6     col-lg-5">
                                                                    <label for="inputEmail">Email</label>
                                                                    <input type="email" class="form-control" id="inputEmail" name="email" placeholder="Enter your email" required>
                                                                </div>
                                                            </div>
                                                            <div class="form-group  col-lg-10">
                                                                <label for="inputAddress">Address (Area and Street)</label>
                                                                <textarea class="form-control" id="inputAddress" rows="2"  name="streetAddress" placeholder="Enter your address" required></textarea>
                                                            </div>
                                                            <div class="form-row">
                                                                <div class="form-group col-md-6     col-lg-5">
                                                                    <label for="inputLocalityDistrict">City/District/Town</label>
                                                                    <input type="text" class="form-control" id="inputLocalityDistrict" name="city"  placeholder="Enter your city/district/town" required>
                                                                </div>
                                                                <div class="form-group col-md-6   col-lg-5">
                                                                    <label for="inputState">State</label>
                                                                    <select id="inputState" name="state" class="form-control" required>
                                                                        <option selected>Select your state</option>
                                                                        <!-- Add options for all 28 states of India -->
                                                                        <option>Andhra Pradesh</option>
                                                                        <option>Arunachal Pradesh</option>
                                                                        <option>Assam</option>
                                                                        <option>Bihar</option>
                                                                        <option>Chhattisgarh</option>
                                                                        <option>Goa</option>
                                                                        <option>Gujarat</option>
                                                                        <option>Haryana</option>
                                                                        <option>Himachal Pradesh</option>
                                                                        <option>Jharkhand </option>
                                                                        <option>Karnataka</option>
                                                                        <option>Kerala</option>
                                                                        <option>Madhya Pradesh</option>
                                                                        <option>Maharashtra</option>
                                                                        <option>Manipur</option>
                                                                        <option>Meghalaya</option>
                                                                        <option>Mizoram</option>
                                                                        <option>Nagaland</option>
                                                                        <option>Odisha</option>
                                                                        <option>Punjab</option>
                                                                        <option>Rajasthan</option>
                                                                        <option>Sikkim</option>
                                                                        <option>Tamil Nadu</option>
                                                                        <option>Telangana</option>
                                                                        <option>Tripura</option>
                                                                        <option>Uttar Pradesh</option>
                                                                        <option>Uttarakhand</option>
                                                                        <option>West Bengal</option>
                                            
                                            
                                                                        <!-- Add more options here -->
                                                                    </select>
                                                                </div>
                                                            </div>
                                                            <div class="form-row">
                                                                <div class="form-group col-md-6   col-lg-5">
                                                                    <label for="inputLandmark">Landmark (Optional)</label>
                                                                    <input type="text" class="form-control" id="inputLandmark" name="landmark" placeholder="Enter your landmark">
                                                                </div>
                                                                <div class="form-group col-md-6   col-lg-5">
                                                                    <label for="inputAlternatePhone">Alternate Phone (Optional)</label>
                                                                    <input type="text" class="form-control" id="inputAlternatePhone" name="phone2" placeholder="Enter your alternate phone">
                                                                </div>
                                                            </div>
                                                            <!-- <button type="submit" class="btn btn-primary"   data-toggle="collapse" data-target="#shippingAddressCollapse">Save</button> -->
                                                            <button type="submit" class="btn btn-primary">Save</button>
                                                            <button type="reset" class="btn btn-secondary" data-toggle="collapse" data-target="#shippingAddressCollapse" aria-expanded="false" aria-controls="shippingAddressCollapse">Cancel</button>
                                                        </form>
                                                    </div>
                                                </div>
                                            Â Â Â Â Â Â Â Â Â Â </div>

								    	</div><!-- End .row -->
								    </div><!-- .End .tab-pane -->

								    <div class="tab-pane fade" id="tab-account" role="tabpanel" aria-labelledby="tab-account-link">
								    	<form id="changePasswordForm" action="changepassword" method="post">
			                				<div class="row">
			                					<!-- <div class="col-sm-6">
			                						<label>First Name *</label>
			                						<input type="text" class="form-control" required>
			                					</div> -->
                                                <!-- End .col-sm-6 -->

			                					<!-- <div class="col-sm-6">
			                						<label>Last Name *</label>
			                						<input type="text" class="form-control" required>
			                					</div> -->
                                                <!-- End .col-sm-6 -->
			                				</div><!-- End .row -->

		            						<!-- <label>Display Name *</label>
		            						<input type="text" class="form-control" required>
		            						<small class="form-text">This will be how your name will be displayed in the account section and in reviews</small> -->

		                					<label>Email address *</label>
		        							<input type="email" name="email" value="<%= user.email %>" class="form-control" required>

		            						<label>Current password (leave blank to leave unchanged)</label>
		            						<input type="password" name="currentPassword" class="form-control" required>

		            						<label>New password (leave blank to leave unchanged)</label>
		            						<input type="password" name="newPassword" class="form-control" required>

		            						<label>Confirm new password</label>
		            						<input type="password" name="confirmPassword" class="form-control mb-2" required>

		                					<button type="submit" class="btn btn-outline-primary-2">
			                					<span>SAVE CHANGES</span>
			            						<i class="icon-long-arrow-right"></i>
			                				</button>
			                			</form>
								    </div><!-- .End .tab-pane -->
                                    <div class="tab-pane fade" id="tab-wallet" role="tabpanel" aria-labelledby="tab-wallet-link">
                                        <div class="row">
                                            <div class="col-lg-12">
                                                <div class="card card-dashboard">
                                                    <div class="card-body">
                                                        <h4>Wallet</h4>
                                                        <div>
                                                            <p>Current Balance: <span id="wallet-balance">â‚¹<%= userwallet ? userwallet.balance : 0 %></span></p>
                                                        </div>
                                                        <hr>
                                                        <h5>Transaction History</h5>
                                                        <ul id="transaction-list">
                                                            <% if(transactions>0){ %>
                                                            <% transactions.forEach(transaction => {%>
                                                                <li><%= transaction.date %> - <%= transaction.type %> : â‚¹<%= transaction.amount %> (<%= transaction.reason %>)</li>
                                                            <% }) %>
                                                            <% } %>
                                                        </ul>
                                                        <button id="deposit-btn" class="btn btn-primary">Deposit Funds</button>
                                                        <button id="withdraw-btn" class="btn btn-primary">Withdraw Funds</button>
                                                        <button id="transfer-btn" class="btn btn-primary">Transfer Funds</button>
                                                        <button id="wallet-settings-btn" class="btn btn-secondary">Wallet Settings</button>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div><!-- .End .tab-pane -->


<!-- script for wallet functionality -->

<script>
//     // Mock data for initial wallet balance and transaction history
 let walletBalance = 0; // $0
 let transactionHistory = []; // Define transactionHistory variable
// const transactionHistory = [
//     { date: '2024-03-17', type: 'Deposit', amount: 500, description: 'Initial deposit' },
//     { date: '2024-03-18', type: 'Withdrawal', amount: 200, description: 'Grocery shopping' }
// ];


// Function to display wallet balance
function displayWalletBalance() {
    document.getElementById('wallet-balance').textContent = `â‚¹${walletBalance.toFixed(2)}`;
}

// Function to display transaction history
function displayTransactionHistory(transactions) {
    const transactionList = document.getElementById('transaction-list');
    transactionList.innerHTML = '';
    transactionHistory.forEach(transactions => {
        const listItem = document.createElement('li');
        listItem.textContent = `${transactions.date} - ${transactions.type}: â‚¹${transactions.amount} (${transactions.reason})`;
        transactionList.appendChild(listItem);
    });
}

// Function to handle deposit funds


function depositFunds() {
    swal({
        text: 'Enter deposit amount',
        content: 'input',
        button: {
            text: 'Deposit',
            closeModal: false,
        },
    }).then(value => {
        const depositAmount = parseFloat(value)
        if (isNaN(depositAmount) || depositAmount <= 0) {
            swal('Invalid Input', 'Please enter a valid deposit amount', 'error')
        } else {
            // make an ajax request to deposit funds
            fetch('/deposit', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ amount: depositAmount }), // Corrected property name
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Failed to deposit funds')
                }
                return response.json()
            })
            .then(data => {
                walletBalance += depositAmount
                displayWalletBalance(walletBalance)
                transactionHistory.push({
                    date: new Date().toISOString().slice(0, 10),
                    type: 'Deposit',
                    amount: depositAmount,
                    reason: 'Deposit funds'
                })
                displayTransactionHistory(transactionHistory)
                swal('Success', `You have successfully deposited â‚¹${depositAmount.toFixed(2)}.`, 'success')
            })
            .catch(error => {
                console.error(error)
                swal('Error', 'Failed to deposit funds', 'error')
            })
        }
    })
}

// Ensure that transactionHistory is accessible to displayTransactionHistory function
function displayTransactionHistory(transactions) {
    const transactionList = document.getElementById('transaction-list');
    transactionList.innerHTML = '';
    transactions.forEach(transaction => {
        const listItem = document.createElement('li');
        listItem.textContent = `${transaction.date} - ${transaction.type}: â‚¹${transaction.amount} (${transaction.reason})`;
        transactionList.appendChild(listItem);
    });
}


// Function to handle withdraw funds
function withdrawFunds() {
   swal({
    text:'Enter withdrawal amount',
    content:'input',
    button:{
        text:'Withdraw',
        closeModal:false
    },
   }).then(value => {
    const withdrawAmount = parseFloat(value)
    if(isNaN(withdrawAmount) || withdrawAmount <= 0 || withdrawAmount > walletBalance){
        swal('Invalid Input','Please enter a valid withdrawal amount.','error')
    } else {
        // Make an AJAX request to withdraw funds
        fetch('/withdraw',{
            method:'POST',
            headers:{
                'Content-Type':'application/json',
            },
            body:JSON.stringify({ amount: withdrawAmount }), // Corrected property name
        })
        .then(response => {
            if(!response.ok){
                throw new Error('Failed to withdraw funds')
            }
            return response.json()
        })
        .then(data => {
            walletBalance -= withdrawAmount
            displayWalletBalance(walletBalance)
            transactionHistory.push({
                date:new Date().toISOString().slice(0,10),
                type:'Withdrawal',
                amount:withdrawAmount,
                reason:'Withdraw funds'
            })
            displayTransactionHistory(transactionHistory)
            swal('Success',`You have successfully withdrawn â‚¹${withdrawAmount.toFixed(2)}.`,'success')
        })
        .catch(error => {
            console.error(error)
            swal('Error','Failed to withdraw funds', 'error')
        })
    }
   })
}

// Function to handle transfer funds
function transferFunds() {
    swal({
        text: 'Enter recipient username:',
        content: 'input',
        button: {
            text: 'Next',
            closeModal: false,
        },
    }).then(recipient => {
        if (!recipient) {
            swal('Invalid Input', 'Recipient username cannot be empty.', 'error');
            return;
        }
        swal({
            text: 'Enter transfer amount:',
            content: 'input',
            button: {
                text: 'Transfer',
                closeModal: false,
            },
        }).then(amount => {
            const transferAmount = parseFloat(amount);
            if (isNaN(transferAmount) || transferAmount <= 0 || transferAmount > walletBalance) {
                swal('Invalid Input', 'Please enter a valid transfer amount.', 'error');
            } else {
                // Make an AJAX request to transfer funds
                fetch('/api/wallet/transfer', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ recipient, amount: transferAmount }),
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to transfer funds');
                    }
                    return response.json();
                })
                .then(data => {
                    walletBalance -= transferAmount;
                    displayWalletBalance(walletBalance);
                    transactionHistory.push({
                        date: new Date().toISOString().slice(0, 10),
                        type: 'Transfer',
                        amount: transferAmount,
                        reason: `Transferred to ${recipient}`
                    });
                    displayTransactionHistory(transactionHistory);
                    swal('Success', `You have successfully transferred â‚¹${transferAmount.toFixed(2)} to ${recipient}.`, 'success');
                })
                .catch(error => {
                    console.error(error);
                    swal('Error', 'Failed to transfer funds', 'error');
                });
            }
        });
    });
}



// Add event listeners to buttons
document.getElementById('deposit-btn').addEventListener('click', depositFunds);
document.getElementById('withdraw-btn').addEventListener('click', withdrawFunds);
document.getElementById('transfer-btn').addEventListener('click', transferFunds);

// Initial display of wallet balance and transaction history
displayWalletBalance( walletBalance );
displayTransactionHistory( JSON.stringify(transactionHistory) );
</script>



								</div>
	                		</div><!-- End .col-lg-9 -->
	                	</div><!-- End .row -->
	                </div><!-- End .container -->
                </div><!-- End .dashboard -->
            </div><!-- End .page-content -->
        </main><!-- End .main -->

        <footer class="footer">
        	<div class="footer-middle">
	            <div class="container">
	            	<div class="row">
	            		<div class="col-sm-6 col-lg-3">
	            			<div class="widget widget-about">
	            				<img src="/user/assets/images/logo.png" class="footer-logo" alt="Footer Logo" width="105" height="25">
	            				<p>Praesent dapibus, neque id cursus ucibus, tortor neque egestas augue, eu vulputate magna eros eu erat. </p>

	            				<div class="social-icons">
	            					<a href="#" class="social-icon" target="_blank" title="Facebook"><i class="icon-facebook-f"></i></a>
	            					<a href="#" class="social-icon" target="_blank" title="Twitter"><i class="icon-twitter"></i></a>
	            					<a href="#" class="social-icon" target="_blank" title="Instagram"><i class="icon-instagram"></i></a>
	            					<a href="#" class="social-icon" target="_blank" title="Youtube"><i class="icon-youtube"></i></a>
	            					<a href="#" class="social-icon" target="_blank" title="Pinterest"><i class="icon-pinterest"></i></a>
	            				</div><!-- End .soial-icons -->
	            			</div><!-- End .widget about-widget -->
	            		</div><!-- End .col-sm-6 col-lg-3 -->

	            		<div class="col-sm-6 col-lg-3">
	            			<div class="widget">
	            				<h4 class="widget-title">Useful Links</h4><!-- End .widget-title -->

	            				<ul class="widget-list">
	            					<li><a href="about.html">About Molla</a></li>
	            					<li><a href="#">How to shop on Molla</a></li>
	            					<li><a href="#">FAQ</a></li>
	            					<li><a href="contact.html">Contact us</a></li>
	            					<li><a href="login.html">Log in</a></li>
	            				</ul><!-- End .widget-list -->
	            			</div><!-- End .widget -->
	            		</div><!-- End .col-sm-6 col-lg-3 -->

	            		<div class="col-sm-6 col-lg-3">
	            			<div class="widget">
	            				<h4 class="widget-title">Customer Service</h4><!-- End .widget-title -->

	            				<ul class="widget-list">
	            					<li><a href="#">Payment Methods</a></li>
	            					<li><a href="#">Money-back guarantee!</a></li>
	            					<li><a href="#">Returns</a></li>
	            					<li><a href="#">Shipping</a></li>
	            					<li><a href="#">Terms and conditions</a></li>
	            					<li><a href="#">Privacy Policy</a></li>
	            				</ul><!-- End .widget-list -->
	            			</div><!-- End .widget -->
	            		</div><!-- End .col-sm-6 col-lg-3 -->

	            		<div class="col-sm-6 col-lg-3">
	            			<div class="widget">
	            				<h4 class="widget-title">My Account</h4><!-- End .widget-title -->

	            				<ul class="widget-list">
	            					<li><a href="#">Sign In</a></li>
	            					<li><a href="cart.html">View Cart</a></li>
	            					<li><a href="#">My Wishlist</a></li>
	            					<li><a href="#">Track My Order</a></li>
	            					<li><a href="#">Help</a></li>
	            				</ul><!-- End .widget-list -->
	            			</div><!-- End .widget -->
	            		</div><!-- End .col-sm-6 col-lg-3 -->
	            	</div><!-- End .row -->
	            </div><!-- End .container -->
	        </div><!-- End .footer-middle -->

	        <div class="footer-bottom">
	        	<div class="container">
	        		<p class="footer-copyright">Copyright Â© 2019 Molla Store. All Rights Reserved.</p><!-- End .footer-copyright -->
	        		<figure class="footer-payments">
	        			<img src="/user/assets/images/payments.png" alt="Payment methods" width="272" height="20">
	        		</figure><!-- End .footer-payments -->
	        	</div><!-- End .container -->
	        </div><!-- End .footer-bottom -->
        </footer><!-- End .footer -->
    </div><!-- End .page-wrapper -->
    <button id="scroll-top" title="Back to Top"><i class="icon-arrow-up"></i></button>

    <!-- Mobile Menu -->
    <div class="mobile-menu-overlay"></div><!-- End .mobil-menu-overlay -->

    <div class="mobile-menu-container">
        <div class="mobile-menu-wrapper">
            <span class="mobile-menu-close"><i class="icon-close"></i></span>

            <form action="#" method="get" class="mobile-search">
                <label for="mobile-search" class="sr-only">Search</label>
                <input type="search" class="form-control" name="mobile-search" id="mobile-search" placeholder="Search in..." required>
                <button class="btn btn-primary" type="submit"><i class="icon-search"></i></button>
            </form>
            
           

            <div class="social-icons">
                <a href="#" class="social-icon" target="_blank" title="Facebook"><i class="icon-facebook-f"></i></a>
                <a href="#" class="social-icon" target="_blank" title="Twitter"><i class="icon-twitter"></i></a>
                <a href="#" class="social-icon" target="_blank" title="Instagram"><i class="icon-instagram"></i></a>
                <a href="#" class="social-icon" target="_blank" title="Youtube"><i class="icon-youtube"></i></a>
            </div><!-- End .social-icons -->
        </div><!-- End .mobile-menu-wrapper -->
    </div><!-- End .mobile-menu-container -->

    
   

    <!-- Plugins JS File -->
    <script src="/user/assets/js/jquery.min.js"></script>
    <script src="/user/assets/js/bootstrap.bundle.min.js"></script>
    <script src="/user/assets/js/jquery.hoverIntent.min.js"></script>
    <script src="/user/assets/js/jquery.waypoints.min.js"></script>
    <script src="/user/assets/js/superfish.min.js"></script>
    <script src="/user/assets/js/owl.carousel.min.js"></script>
    <!-- Main JS File -->
    <script src="/user/assets/js/main.js"></script>




<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>




<!-- sweet alert when adding new address -->


<!-- Your EJS template or HTML file -->
<script>
    document.addEventListener('DOMContentLoaded', function () {
        const form = document.querySelector('#addressForm');

        form.addEventListener('submit', function (event) {
            event.preventDefault();

            // Make the form data
            const formData = new FormData(form);

            // Send the form data using fetch
            fetch('/address', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                // Check if the response status is OK (HTTP 2xx)
                if (response.ok) {
                    // Handle success with SweetAlert
                    Swal.fire({
                        title: 'Success!',
                        text: data.message,
                        icon: 'success'
                    }).then(() => {
                        // If needed, you can redirect or perform additional actions here
                        // For example, redirecting to the profile page:
                        window.location.href = '/profile';
                    });
                } else {
                    // Handle errors with SweetAlert
                    Swal.fire({
                        title: 'Error!',
                        text: data.message,
                        icon: 'error'
                    });
                }
            })
            .catch(error => {
                console.error('Error during fetch:', error);
                // Handle other errors with SweetAlert
                Swal.fire({
                    title: 'Error!',
                    text: 'Failed to add address. Please try again later.',
                    icon: 'error'
                });
            });
        });
    });
</script>








<!-- sweet alert for deleting the address -->
<script>
    function confirmDelete(addressId) {
        Swal.fire({
            title: 'Are you sure?',
            text: 'You are about to delete this address.',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, delete it!'
        }).then((result) => {
            if (result.isConfirmed) {
                deleteAddress(addressId);
            }
        });
    }

    function deleteAddress(addressId) {
        fetch(`/address/${addressId}`, { // Add backticks for the template literal
            method: 'DELETE'
        })
        .then(res => {
            if (res.ok) {
                removeAddressFromPage(addressId);
                Swal.fire('Deleted!', 'The address has been deleted.', 'success');
                setTimeout(()=>{
                    window.location.reload()
                },1000)
            } else {
                throw new Error('Failed to delete address');
            }
        })
        .catch(error => {
            console.error('Error deleting address:', error);
            Swal.fire('Error!', 'Failed to delete address. Please try again later.', 'error');
        });
    }

    function removeAddressFromPage(addressId) {
        const addressElement = document.getElementById(`address_${addressId}`); // Fix the identifier
        if (addressElement) {
            addressElement.remove();
        }
    }
</script>








<!-- script for editing address -->

<!-- sweet alert for editing the address  -->
<script>
    const submitForm = () => {
        // Gather form data
        const formData = {
            name: document.getElementById('inputName').value,
            phone: document.getElementById('inputPhone').value,
            // ... gather other form fields
        };
    
        // Get the address ID from the hidden input field
        const addressId = document.getElementById('addressId').value;
    
        // Call the editAddress function with the gathered data
        editAddress(addressId, formData);
    };
    
    // Edit an existing address
    const editAddress = async (addressId, formData) => {
        try {
            const response = await fetch(`/address/edit/${addressId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(formData),
            });
    
            const result = await response.json();
            console.log("result",result)
    
            if (response.ok) {
                // Show SweetAlert on successful update
                Swal.fire({
                    icon: 'success',
                    title: 'Address Updated',
                    text: 'Your address has been updated successfully!',
                });
            } else {
                // Show SweetAlert on error
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: result.message || 'Something went wrong!',
                });
            }
        } catch (error) {
            console.error(error);
            // Show SweetAlert on internal server error
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Internal Server Error',
            });
        }
    };
    </script>






<!-- form validation -->
<!-- <script>
    function validateForm() {
        // Basic example: Check if the name field is not empty
        var nameField = document.getElementById('inputName');
        if (nameField.value.trim() === '') {
            alert('Name cannot be empty');
            return false; // Prevent form submission
        }

        // Add more validation checks for other fields as needed

        return true; // Allow form submission
    }
</script> -->



<!-- script for cancel order -->
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Select all cancel buttons
        const cancelButtons = document.querySelectorAll('.cancel-order');
    
        // Add click event listener to each cancel button
        cancelButtons.forEach(button => {
            button.addEventListener('click', function(event) {
                // Prevent the default action
                event.preventDefault();
    
                // Get the order ID from the data-order-id attribute
                const orderId = this.getAttribute('data-order-id');
    
                // Display a SweetAlert
                Swal.fire({
                    title: 'Are you sure?',
                    text: "You won't be able to revert this!",
                    icon: 'warning',


                    input: 'text', // Add an input field for the reason
                    inputLabel: 'Reason for cancellation', // Label for the input field
                    inputPlaceholder: 'Enter your reason here', 


                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes, cancel it!'
                }).then((result) => {
                    if (result.isConfirmed) {
                            // If confirmed, send a request to your backend to cancel the order
                            fetch('/api/cancelorder', { // Adjust the URL to match your backend route
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                },
                                body: JSON.stringify({ orderId: orderId }), // Send the order ID in the request body
                            })
                            .then(response => response.json())
                            .then(data => {
                                if (data.success) {
                                    Swal.fire('Cancelled!', 'Your order has been cancelled.', 'success');
                                    setTimeout(()=>{
                                        window.location.reload()
                                    },1000)
                                } else {
                                    Swal.fire('Error!', 'Failed to cancel order.', 'error');
                                }
                            })
                            .catch(error => {
                                console.error('Error:', error);
                                Swal.fire('Error!', 'Failed to cancel order. Please try again later.', 'error');
                            });
                        }
                });
            });
        });
    });
    </script>


<!-- script for return order -->

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Select all cancel buttons
        const cancelButtons = document.querySelectorAll('.return-order');
    
        // Add click event listener to each cancel button
        cancelButtons.forEach(button => {
            button.addEventListener('click', function(event) {
                // Prevent the default action
                event.preventDefault();
    
                // Get the order ID from the data-order-id attribute
                const orderId = this.getAttribute('data-order-id');
    
                // Display a SweetAlert
                Swal.fire({
                    title: 'Are you sure?',
                    text: "You won't be able to revert this!",
                    icon: 'warning',


                    input: 'text', // Add an input field for the reason
                    inputLabel: 'Reason for return', // Label for the input field
                    inputPlaceholder: 'Enter your reason here', 


                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes, return it!'
                }).then((result) => {
                    if (result.isConfirmed) {
                            // If confirmed, send a request to your backend to cancel the order
                            fetch('/api/returnorder', { // Adjust the URL to match your backend route
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                },
                                body: JSON.stringify({ orderId: orderId }), // Send the order ID in the request body
                            })
                            .then(response => response.json())
                            .then(data => {
                                if (data.success) {
                                    Swal.fire('Returned!', 'Your order has been Returned.', 'success');
                                    setTimeout(()=>{
                                        window.location.reload()
                                    },1000)
                                } else {
                                    Swal.fire('Error!', 'Failed to Return order.', 'error');
                                }
                            })
                            .catch(error => {
                                console.error('Error:', error);
                                Swal.fire('Error!', 'Failed to Return order. Please try again later.', 'error');
                            });
                        }
                });
            });
        });
    });
    </script>






<!-- script for validaiton of edit forms  -->

<script>
    document.addEventListener('DOMContentLoaded', function () {
      document.getElementById('editAddressForm').addEventListener('submit', function (event) {
        // Prevent the form from submitting
        event.preventDefault();
  
        // Validate form fields
        if (!validateForm()) {
          return;
        }
  
        // If form is valid, submit the form
        this.submit();
  
        // Display success SweetAlert message
        Swal.fire({
          icon: 'success',
          title: 'Success!',
          text: 'Your address has been edited successfully!',
        });
      });
  
      function validateForm() {
        // Get form inputs
        var name = document.getElementById('inputName').value.trim();
        var phone = document.getElementById('inputPhone').value.trim();
        var email = document.getElementById('inputEmail').value.trim();
        var pincode = document.getElementById('inputPincode').value.trim();
        var address = document.getElementById('inputAddress').value.trim();
        var state = document.getElementById('inputState').value;
        var city = document.getElementById('inputLocalityDistrict').value.trim();
  
        // Check if any of the required fields is empty
        if (name === '' || phone === '' || email === '' || pincode === '' || address === '' || state === 'Select your state' || city === '') {
          // Display SweetAlert message
          Swal.fire({
            icon: 'error',
            title: 'Oops...',
            text: 'Please fill all the fields!',
          });
  
          return false; // Form is not valid
        }
  
        // Check if phone number has exactly 10 digits
        if (!/^\d{10}$/.test(phone)) {
          // Display SweetAlert message
          Swal.fire({
            icon: 'error',
            title: 'Oops...',
            text: 'Please enter a valid 10-digit phone number!',
          });
  
          return false; // Form is not valid
        }
  
        return true; // Form is valid
      }
    });
  </script>















<!-- form validation for add a new address -->

<!-- <script>
     console.log('Script is running');
    document.addEventListener('DOMContentLoaded', function () {
        console.log('DOMContentLoaded event fired'); // Debugging line
        document.querySelector('#addNewAddressForm').addEventListener('submit', function (event) {
            console.log('Form submit event triggered'); // Debugging line
            // Prevent the form from submitting
            event.preventDefault();
    
            // Validate form fields
            console.log('Validating form fields'); // Debugging line
            if (!validateForm()) {
                console.log('Form validation failed'); // Debugging line
                return; // Stop the form submission if there are validation errors
            }
    
            // If form is valid, display success message and submit the form
            console.log('Form validation passed'); // Debugging line
            Swal.fire({
                icon: 'success',
                title: 'Success!',
                text: 'Form submitted successfully!',
            }).then(() => {
                console.log('Success message displayed'); // Debugging line
                // Programmatically submit the form after the success message is closed
                this.submit();
            });
        });
    
        function validateForm() {
            console.log('Inside validateForm function'); // Debugging line
            // Get form inputs using getElementById
            var name = document.getElementById('inputName').value.trim();
            var phone = document.getElementById('inputPhone').value.trim();
            var email = document.getElementById('inputEmail').value.trim();
            var pincode = document.getElementById('inputPincode').value.trim();
            var address = document.getElementById('inputAddress').value.trim();
            var state = document.getElementById('inputState').value.trim(); // Ensure state is trimmed
            var city = document.getElementById('inputLocalityDistrict').value.trim();
    
            console.log('Form inputs:', {name, phone, email, pincode, address, state, city}); // Debugging line
    
            // Check if any of the required fields is empty or contains only whitespace
            if (name === '' || phone === '' || email === '' || pincode === '' || address === '' || state === '' || city === '') {
                console.log('Validation failed: One or more fields are empty'); // Debugging line
                // Display SweetAlert error message
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: 'Please fill in all the required fields!',
                });
    
                return false; // Form is not valid
            }
    
            // Validate phone number length and format
            if (!/^\d{10}$/.test(phone)) {
                console.log('Validation failed: Invalid phone number'); // Debugging line
                // Display SweetAlert error message
                Swal.fire({
                    icon: 'error',
                    title: 'Invalid Phone Number',
                    text: 'Please enter a valid 10-digit phone number!',
                });
    
                return false; // Form is not valid
            }
    
            // Validate email format
            if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
                console.log('Validation failed: Invalid email'); // Debugging line
                // Display SweetAlert error message
                Swal.fire({
                    icon: 'error',
                    title: 'Invalid Email',
                    text: 'Please enter a valid email address!',
                });
    
                return false; // Form is not valid
            }
    
            console.log('Validation passed'); // Debugging line
            return true; // Form is valid
        }
    });
</script> -->







<!-- script for change password validation -->

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@12"></script>
<script>
document.addEventListener('DOMContentLoaded', function () {
    const form = document.getElementById('changePasswordForm');

    if (form) {
        form.addEventListener('submit', function (event) {
            event.preventDefault(); // Prevent the form from submitting normally

            const email = form.querySelector('[name="email"]').value.trim();
            const currentPassword = form.querySelector('[name="currentPassword"]').value.trim();
            const newPassword = form.querySelector('[name="newPassword"]').value;
            const confirmPassword = form.querySelector('[name="confirmPassword"]').value.trim();

            // Validate the form
            if (!email || !currentPassword || !newPassword || !confirmPassword) {
                Swal.fire({
                    icon: 'error',
                    title: 'Validation Error',
                    text: 'Please fill all the fields.',
                });
                return; // Stop the function if validation fails
            }

            if (newPassword !== confirmPassword) {
                Swal.fire({
                    icon: 'error',
                    title: 'Validation Error',
                    text: 'New password and confirm password do not match.',
                });
                return; // Stop the function if validation fails
            }

            // Submit the form using fetch
            fetch('/changepassword', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ email, currentPassword, newPassword, confirmPassword }),
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                // Show success message
                Swal.fire({
                    icon: 'success',
                    title: 'Success',
                    text: 'Password changed successfully.',
                });
                // Optionally, redirect the user or reload the page
                setTimeout(()=>{

                    window.location.reload();
                },1000)
            })
            .catch(error => {
                console.error('There was a problem with the fetch operation:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'There was a problem with the form submission.',
                });
            });
        });
    }
});
</script>


</body>


<!-- molla/dashboard.html  22 Nov 2019 10:03:13 GMT -->
</html>